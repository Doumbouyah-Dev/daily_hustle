The error still persist. Below are my related codes/files. 


#This is my config.py:

from datetime import timedelta
import os

baseddir = os.path.abspath(os.path.dirname(__file__))

class Config(object):
    DEBUG = False

    SECRET_KEY = os.environ.get("SECRET_KEY") or "this-is-a-strong-default-secret-key"

    SQLALCHEMY_DATABASE_URI = os.environ.get("SQLALCHEMY_DATABASE_URI") \
        or "sqlite:///" + os.path.join(baseddir, "app.db")
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    PROPAGATE_EXCEPTIONS = True

    JWT_ACCESS_TOKEN_EXPIRES = timedelta(minutes=15) 
    JWT_REFRESH_TOKEN_EXPIRES = timedelta(days=30) 
    JWT_TOKEN_LOCATION = ["headers"] 
    JWT_BLACKLIST_ENABLED = True
    JWT_BLACKLIST_TOKEN_CHECKS = ["access", "refresh"]

    UPLOADED_IMAGES_DEST = os.path.join("static", "images")
    MAX_CONTENT_LENGTH = 10 * 1024 * 1024 


#This is my app/__init__.py:
from flask import Flask, jsonify
from flask_admin import Admin
from flask_restful import Api
from flask_jwt_extended import JWTManager
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_marshmallow import Marshmallow
from flask_cors import CORS
from flask_uploads import configure_uploads
from app.libs.image_helper import IMAGE_SET
from config import Config
from datetime import timedelta 
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address

from flask_jwt_extended import JWTManager

jwt = JWTManager()

app = Flask(__name__)
app.config.from_object(Config)
api = Api(app)
jwt = JWTManager(app)
db = SQLAlchemy(app)
migrate = Migrate(app, db)
ma = Marshmallow(app)
CORS(app)
configure_uploads(app, IMAGE_SET)




from app.utils.decorators import jwt_blacklist


@jwt.token_in_blocklist_loader
def check_if_token_in_blocklist(jwt_header, jwt_payload):
    jti = jwt_payload["jti"]
    return jwt_blacklist.is_blocked(jti)

@jwt.unauthorized_loader
def unauthorized_response(callback):
    return jsonify({"message": "Missing JWT token or token is invalid."}), 401

@jwt.invalid_token_loader
def invalid_token_response(callback):
    return jsonify({"message": "Signature verification failed. Invalid token."}), 403

@jwt.expired_token_loader
def expired_token_response(jwt_header, jwt_payload):
    return jsonify({"message": "The token has expired.", "error": "token_expired"}), 401

@jwt.revoked_token_loader
def revoked_token_response(jwt_header, jwt_payload):
    return jsonify({"message": "The token has been revoked."}), 401

limiter = Limiter(
    app=app,
    key_func=get_remote_address, # Rate limit by IP address
    default_limits=["200 per day", "50 per hour"] # Default for all routes
)

from app import routes
from cli import user_cli
app.cli.add_command(user_cli)


#This is my app/utils/decorators.py:
from functools import wraps
from flask import request, jsonify, g
from flask_jwt_extended import jwt_required as flask_jwt_required, get_jwt_identity, get_jwt
from app.models import Users, UserRole

class TokenBlacklist:
    def __init__(self):
        self.blocked_tokens = set()

    def add(self, jti):
        self.blocked_tokens.add(jti)

    def is_blocked(self, jti):
        return jti in self.blocked_tokens

jwt_blacklist = TokenBlacklist() 

def role_required(required_role: UserRole):
   
    def decorator(fn):
        @wraps(fn)
        @flask_jwt_required() 
        def wrapper(*args, **kwargs):
            claims = get_jwt() 
            user_role_str = claims.get('role')

            if not user_role_str:
                return jsonify({"message": "Role not found in token claims."}), 403

            try:
                user_role = UserRole(user_role_str)
            except ValueError:
                return jsonify({"message": "Invalid role in token claims."}), 403

            if user_role != required_role:
                return jsonify({"message": f"{required_role.value.capitalize()} privileges required"}), 403

            user_id = get_jwt_identity()
            g.user = Users.find_by_id(user_id)
            if not g.user:
                return jsonify({"message": "User not found."}), 404

            return fn(*args, **kwargs)
        return wrapper
    return decorator

def jwt_required_wrapper(fn):
    
    @wraps(fn)
    @flask_jwt_required() # Ensures valid JWT and automatically handles blacklisting check
    def wrapper(*args, **kwargs):
        user_id = get_jwt_identity()
        g.user = Users.find_by_id(user_id)
        if not g.user:
            return jsonify({"message": "User not found."}), 404
        return fn(*args, **kwargs)
    return wrapper


#This is my app/resources/admin.py:
from flask_restful import Resource
from ..models import Users, UserRole
from ..models import Booking
from ..models import Service
from app import db
from app.utils.decorators import role_required 


class AdminStatsResource(Resource):
    @role_required(UserRole.ADMIN) 
    def get(self):
        return {
            "total_users": Users.query.count(),
            "total_providers": Users.query.filter_by(role=UserRole.PROVIDER).count(),
            "total_bookings": Booking.query.count(),
            "active_services": Service.query.filter_by(is_active=True).count(),
        }, 200


#This is my app/routes.py:
from flask import jsonify
from marshmallow import ValidationError
from app import app, api
from flask_jwt_extended import jwt_required


from app.resources.notification import NotificationResource
from app.resources.category import ServiceCategoryListResource, ServiceCategoryResource
from app.resources.booking import BookingListResource, BookingResource
from app.resources.user import UserListResource, UserRoleApprovalResource, UserDetailResource, UserProfileUpdateResource, UserRoleRequestResource
from app.resources.provider import ProviderListResource, ProviderResource
from app.resources.payment import PaymentListResource, PaymentResource
from app.resources.service import ServiceListResource, ServiceResource
from app.resources.review import ReviewListResource, ReviewResource
from app.resources.notification import NotificationListResource
from .resources.auth.register import UserRegisterResource 
from app.resources.admin import AdminStatsResource
from app.resources.auth.login import UserLoginResource, TokenRefreshResource, UserLogoutResource



# Users
api.add_resource(UserListResource, "/all_users")
api.add_resource(UserDetailResource, "/users/<int:user_id>")
api.add_resource(UserProfileUpdateResource, "/update")
api.add_resource(UserRoleRequestResource, "/users/<int:user_id>/request-role")
api.add_resource(UserRoleApprovalResource, "/users/<int:user_id>/approve-role")
api.add_resource(ProviderListResource, "/providers")
api.add_resource(ProviderResource, "/providers/<int:provider_id>")

# Categories
api.add_resource(ServiceCategoryListResource, "/categories")
api.add_resource(ServiceCategoryResource, "/categories/<int:category_id>")

# Bookings
api.add_resource(BookingListResource, "/bookings")
api.add_resource(BookingResource, "/bookings/<int:booking_id>")

#Payment
api.add_resource(PaymentListResource, "/payments")
api.add_resource(PaymentResource, "/payments/<int:payment_id>")

# Services
api.add_resource(ServiceListResource, "/services")
api.add_resource(ServiceResource, "/services/<int:service_id>")



# Reviews
api.add_resource(ReviewListResource, "/reviews")
api.add_resource(ReviewResource, "/reviews/<int:review_id>")

# Notifications
api.add_resource(NotificationListResource, "/notifications")
api.add_resource(NotificationResource, "/notifications/<int:notification_id>")


# User Protection
api.add_resource(UserRegisterResource, "/auth/v1/register")
api.add_resource(AdminStatsResource, "/admin/v1/stats")
api.add_resource(UserLoginResource, '/auth/v1/login')
api.add_resource(TokenRefreshResource, '/auth/v1/refresh')
api.add_resource(UserLogoutResource, '/auth/v1/logout')




@app.route('/')
def root_info():
    return jsonify({
        "message": "Welcome to your Flask Restful API!",
        "available_endpoints": {
            "/auth/register": "POST - Register a new user",
            # Add other endpoints you have or plan to have
        }
    }), 200 

